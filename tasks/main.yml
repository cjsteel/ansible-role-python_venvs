---
# tasks file for python_venvs

- name: Import assert.yml
  ansible.builtin.import_tasks:
    file: assert.yml
  run_once: true
  delegate_to: localhost

- name: Install virtualenv requirements
  package:
    name: "{{ python_virtualenv_packages }}"
    state: "{{ python_virtualenv_package_state }}"
  when: ansible_os_family != "Windows"
  become: true

- name: Create the base directory for virtual environments
  file:
    path: "{{ python_venvs_base_dir }}"
    state: directory

- name: Manage virtual environments (create or delete)
  block:
    - name: Delete the virtual environment if state is absent
      file:
        path: "{{ python_venvs_base_dir }}/{{ item.name }}"
        state: absent
      when: item.state is defined and item.state == "absent"
      loop: "{{ python_venvs }}"

    - name: Ensure the virtual environment directory exists
      file:
        path: "{{ python_venvs_base_dir }}/{{ item.name }}"
        state: directory
      when: item.state is not defined or item.state == "present"
      loop: "{{ python_venvs }}"

    - name: Create the virtual environment
      command: python3 -m venv "{{ python_venvs_base_dir }}/{{ item.name }}"
      args:
        creates: "{{ python_venvs_base_dir }}/{{ item.name }}/bin/activate"
      when: item.state is not defined or item.state == "present"
      loop: "{{ python_venvs }}"

    - name: Update pip in the virtual environment
      command: "{{ python_venvs_base_dir }}/{{ item.name }}/bin/pip install --upgrade pip"
      when: item.state is not defined or item.state == "present"
      loop: "{{ python_venvs }}"

    - name: Install specified packages into the virtual environment
      pip:
        virtualenv: "{{ python_venvs_base_dir }}/{{ item.name }}"
        name: "{{ item.packages }}"
        state: present
      when: item.state is not defined or item.state == "present" and item.packages is defined
      loop: "{{ python_venvs }}"

    - name: Ensure the ~/.bash_aliases file exists
      file:
        path: ~/.bash_aliases
        state: touch

    - name: Add alias to ~/.bash_aliases for each virtual environment
      lineinfile:
        path: ~/.bash_aliases
        line: "alias {{ item.name }}='source {{ python_venvs_base_dir }}/{{ item.name }}/bin/activate'"
        state: present
      when: item.state is not defined or item.state == "present"
      loop: "{{ python_venvs }}"

    - name: Reload bash configuration to include aliases
      shell: source ~/.bashrc
      args:
        executable: /bin/bash
