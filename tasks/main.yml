---
# tasks file for python_venvs

- name: Import assert.yml
  ansible.builtin.import_tasks:
    file: assert.yml
  run_once: true
  delegate_to: localhost

- name: Install virtualenv requirements
  package:
    name: "{{ python_virtualenv_packages }}"
    state: "{{ python_virtualenv_package_state }}"
  when: ansible_os_family != "Windows"
  become: true

- name: Print the value of python_venvs
  ansible.builtin.debug:
    msg: "The value of the variable is {{ python_venvs }}"

- name: Ensure base directory for virtual environments exists
  file:
    path: "{{ python_venvs_base_dir }}"
    state: directory

- name: Manage Python virtual environments
  block:
    - name: Delete virtual environment if state is false
      file:
        path: "{{ python_venvs_base_dir }}/{{ item.name }}/{{ item.version }}"
        state: absent
      when: item.state is defined and not item.state
      loop: "{{ python_venvs }}"

    - name: Ensure virtual environment directory exists
      file:
        path: "{{ python_venvs_base_dir }}/{{ item.name }}/{{ item.version }}"
        state: directory
        mode: '0755'
      when: item.state | default(true)
      loop: "{{ python_venvs }}"

    - name: Create the virtual environment
      command: python3 -m venv "{{ python_venvs_base_dir }}/{{ item.name }}/{{ item.version }}"
      args:
        creates: "{{ python_venvs_base_dir }}/{{ item.name }}/{{ item.version }}/bin/activate"
      when: item.state | default(true)
      loop: "{{ python_venvs }}"

    - name: Upgrade pip in virtual environment
      command: "{{ python_venvs_base_dir }}/{{ item.name }}/{{ item.version }}/bin/pip install --upgrade pip"
      when: item.state | default(true)
      loop: "{{ python_venvs }}"

    - name: Install packages into virtual environment
      pip:
        virtualenv: "{{ python_venvs_base_dir }}/{{ item.name }}/{{ item.version }}"
        name: "{{ item.packages }}"
        state: present
      when: (item.state | default(true)) and item.packages is defined
      loop: "{{ python_venvs }}"

    - name: Ensure ~/.bash_aliases file exists
      file:
        path: ~/.bash_aliases
        state: touch

    - name: Manage aliases in ~/.bash_aliases
      lineinfile:
        path: ~/.bash_aliases
        line: "alias {{ item.name }}-{{ item.version }}='source {{ python_venvs_base_dir }}/{{ item.name }}/{{ item.version }}/bin/activate'"
        state: "{{ 'present' if item.state | default(true) else 'absent' }}"
      loop: "{{ python_venvs }}"

- name: Reload bash configuration to apply aliases
  shell: source ~/.bashrc
  args:
    executable: /bin/bash
